---
title: 'What Plot?'
format: 
  html:
    toc: true
    df-print: paged
    embed-resources: true
execute:
  echo: false
  warning: false
---

```{r setup}
#| include: false

LoadPackages(tidyr, purrr, dplyr, ggplot2, scales, sn)

load('what-plot-data.Rda')
```

```{r}

# set.seed(123)
# d <- tibble(
#   retail = client_spread(0, .01, 1000, c(20, 70)),
#   construction = client_spread(0.1, .2, 8, c(28, 55)),
#   care = client_spread(0.2, .8, 5, c(30, 60))
# ) |>
#   pivot_longer(everything(), names_to = 'industry', values_to = 'age', names_transform = forcats::fct_inorder)

```

## Number of downloads per day during a **single week**

what type of plot would you choose to visualize the data below?

```{r}

n_dl |> 
  knitr::kable(format = 'html') |> 
  kableExtra::column_spec(seq_along(n_dl), width = '50px')

```

::: {.callout-tip icon="false" collapse="true"}
## What plot?

::: panel-tabset
### Bar

![](images/what-plot_bar_n-dls.png)

-   Bar plot
    -   good for counts
    -   good for discrete point values
    -   but why not just use a point?

### Point

![](images/what-plot_point_n-dls.png)

-   Point plot
    -   Conveys *exactly* the same informtion as the bar plot
    -   However, points might look a bit disconected
    -   Using points also reduces the need to include 0 on the y axis because there is no longer any possibility of comparing bar areas.

### Lollipop

![](images/what-plot_lollipop_n-dls.png)

-   Lollipop plot
    -   Conveys *exactly* the same information as the bar plot.
    -   helps reduce the "floatiness" of the points.
    -   Again 0 should be included.
    -   Works well with lots of points.

### Line

![](images/what-plot_line_n-dls.png)

-   Line plot
    -   Connecting points with a line suggests the points follow a sequence, e.g. day order.

### Pie

![](images/what-plot_pie-bad_n-dls.png)

-   Pie cahrt
    -   Eww, yuck!
    -   Too many categories.
    -   Which is bigger: Tue, Wed, Thu, or Sun?
    -   We are pretty decent at noticing deviations from straight / level
        -   but pretty poor at putting a number on the deviation.
:::
:::

## Client age data

Here we have many values for each of three categories.
The data show the ages of people downloading an app, from three different sectors.
Each category has a different number of observations.
Decide if we want to see every single observation or summarize in some way.

-   N observations
    -   Retail: 80\
    -   Construction: 50\
    -   Care: 30

```{r}

age_by_ind

```

::: {.callout-tip icon="false" collapse="true"}
## what plot?

::: panel-tabset
### Hist age

![](images/what-plot_density_age-by-ind.png)

-   Density plot
    -   Good for visualizing distribution of continuous data
    -   Nice to overlap if only a few categories

### Dotplot

![](images/what-plot_dotplot_age-by-ind.png)

### Violin plot

![](images/what-plot_beeswarm_age-by-ind.png)

Violin plots convey more info than either bar plots or boxplots, especially if you show points.

This plot hints at a compelling story about how users from different industries use the app.

### Average summary bar chart

![](images/what-plot_bar-avg_age-by-ind.png)

-   Not a good choice for showing summaries
    -   Too much information lost

### Boxlot

![](images/what-plot_boxplot_age-by-ind.png)

### Combo plot

![](images/what-plot_summary-combo_age-by-ind.png)
:::
:::

## Churn vs year plot

## Churn %age change

```{r}

churn_data |> 
  mutate(churn = paste(churn, '%')) |> 
  knitr::kable(format = 'html') |> 
  kableExtra::column_spec(seq_along(n_dl), width = '50px')

```

::: {.callout-tip icon="false" collapse="true"}
## What plot?

::: panel-tabset
### Bar plot

![](images/what-plot_bar-plot_churn.png)

### Stacked bars as percent

![](images/what-plot_bar-plot-stacked_churn.png)

### Pie

![](images/what-plot_pie-chart_churn.png)

What's wrong with this plot?
:::
:::

## Clients by industry

Using the same data as earlier, we want to get a better idea of the breakdown of industry types using our app.

Remember, in the full data there are:

-   N observations
    -   Retail: 80\
    -   Construction: 50\
    -   Care: 30

Here's a recap of how it looks

```{r}
age_by_ind |> 
  group_by(industry) |> 
  slice(1:3)
```

::: {.callout-tip icon="false" collapse="true"}
## What plot?

::: panel-tabset
### Bar plot - Count

![](images/what-plot_bar-count_by-industry.png)

### Stacked count

![](images/what-plot_bar-count-stacked_by-industry.png)

### Stacked percent

![](images/what-plot_bar-percent-stacked_by-industry.png) )

### Pie

![](images/what-plot_pie-chart_by-industry.png)
:::
:::
